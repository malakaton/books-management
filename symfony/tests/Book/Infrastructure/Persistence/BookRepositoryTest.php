<?php

declare(strict_types=1);

namespace BooksManagement\Tests\Book\Infrastructure\Persistence;

use BooksManagement\Author\Domain\Author;
use BooksManagement\Book\Application\Create\CreateBookCommand;
use BooksManagement\Book\Domain\BookDescription;
use BooksManagement\Book\Domain\BookRepository;
use BooksManagement\Book\Infrastructure\Persistence\BookRepositoryMysql;
use BooksManagement\Tests\Book\Domain\BookContentMother;
use BooksManagement\Tests\Book\Domain\BookDescriptionMother;
use BooksManagement\Tests\Book\Domain\BookTitleMother;
use BooksManagement\Tests\Shared\Infrastructure\Doctrine\DoctrineInfrastructureTestCase;
use BooksManagement\Tests\Book\Domain\BookMother;
use BooksManagement\Tests\Book\Domain\BookUuidMother;

final class BookRepositoryTest extends DoctrineInfrastructureTestCase
{
    private BookRepository $bookRepository;
    private ?Author $author;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->bookRepository = $this->repository(BookRepositoryMysql::class);
        $authorRepository = $this->entityManager->getRepository(Author::class);

        $this->author = $authorRepository->findOneBy([]);
    }

    /** @test */
    public function it_should_save_a_book(): void
    {
        $book = BookMother::fromRequest(
            new CreateBookCommand(
                $this->author->uuid()->value(),
                BookTitleMother::random()->value(),
                BookDescriptionMother::random()->value(),
                BookContentMother::random()->value()
            )
        );

        $this->bookRepository->save($book);
    }

    /** @test */
    public function it_should_return_an_existing_book(): void
    {
        $book = BookMother::fromRequest(
            new CreateBookCommand(
                $this->author->uuid()->value(),
                BookTitleMother::random()->value(),
                BookDescriptionMother::random()->value(),
                BookContentMother::random()->value()
            )
        );

        $this->bookRepository->save($book);

        self::assertEquals($book, $this->bookRepository->search($book->uuid()));
    }

    /** @test */
    public function it_should_not_return_a_non_existing_book(): void
    {
        self::assertNull($this->bookRepository->search(BookUuidMother::random()));
    }
}