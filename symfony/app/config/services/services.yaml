# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
#parameter_name: value

services:
  # default configuration for services in *this* file
  _defaults:
    # automatically injects dependencies in your services
    autowire: true
    # automatically registers your services as commands, event subscribers, etc.
    autoconfigure: true
    # this means you cannot fetch services directly from the container via $container->get()
    # if you need to do this, you can override this setting on individual services

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  BooksManagement\:
    resource: '../../../src/'

  # controllers are imported separately to make sure they're public
  # and have a tag that allows actions to type-hint services
  BooksManagement\Book\EntryPoint\Http\Controller\:
    resource: '../../../src/Book/EntryPoint/Http/Controller'
    tags: ['controller.service_arguments']

  BooksManagement\App\Controller\:
    resource: '../../src/Controller/'
    tags: ['controller.service_arguments']

  BooksManagement\Shared\Infrastructure\Symfony\Exception\ApiExceptionListener:
    tags:
      - { name: kernel.event_listener, event: kernel.exception}

  BooksManagement\Shared\Infrastructure\Elasticsearch\ElasticsearchClient:
    factory: '@BooksManagement\Shared\Infrastructure\Elasticsearch\ElasticsearchClientFactory'
    arguments:
      - '%env(ELASTICSEARCH_HOST)%'
      - '%env(ELASTICSEARCH_INDEX_PREFIX)%'
    public: true

  BooksManagement\Book\Domain\BookRepository: '@BooksManagement\Book\Infrastructure\Persistence\BookRepositoryMysql'
  BooksManagement\Book\Domain\ElasticBookRepository: '@BooksManagement\Book\Infrastructure\Persistence\BookRepositoryElasticsearch'